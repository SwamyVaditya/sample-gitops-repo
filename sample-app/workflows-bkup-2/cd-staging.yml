name: CD to Staging

on:
  push:
    branches:
      - staging

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/sample-app
  VERSION_FILE: metadata/staging_version.txt       # File to store the next RC version

jobs:
  deploy-staging:
    runs-on: ubuntu-latest

    permissions:
      contents: write
      packages: write

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set lowercase image name
        id: image_name
        run: echo "name=${IMAGE_NAME,,}" >> $GITHUB_OUTPUT

      - name: Get image tag from dev overlay
        id: dev_tag
        run: |
          TAG=$(yq eval '.images[0].newTag' k8s/overlays/dev/kustomization.yaml)
          if [ -z "$TAG" ]; then
            echo "❌ No image tag found in dev overlay"
            exit 1
          fi
          echo "tag=$TAG" >> $GITHUB_OUTPUT

          echo "✅ Found image tag: $TAG"
      
      - name: Determine next RC version
        id: semver
        run: |
          mkdir -p metadata

          if [ -f "$VERSION_FILE" ]; then
            CURRENT=$(cat $VERSION_FILE)
          else
            CURRENT="v1.0.0-rc.0"
          fi

          BASE=$(echo $CURRENT | cut -d- -f1)
          RC_NUM=$(echo $CURRENT | grep -oE 'rc.[0-9]+' | cut -d. -f2)

          if [ -z "$RC_NUM" ]; then
            RC_NUM=0
          fi
          NEXT_RC=$((RC_NUM + 1))

          NEXT="${BASE}-rc.${NEXT_RC}"
          echo "$NEXT" > $VERSION_FILE
          echo "next=$NEXT" >> $GITHUB_OUTPUT
                
          echo "✅ Next RC version: $NEXT"
      
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Pull image from cd-dev.yml workflow
        run: |
          docker pull ${{ env.REGISTRY }}/${{ steps.image_name.outputs.name }}:${{ steps.dev_tag.outputs.tag }}

      - name: Retag and push image (staging tag)
        id: retag_push
        run: |
          
          tag=$(echo ${{ steps.dev_tag.outputs.tag }} | cut -d '-' -f 2)
          STAGING_TAG=staging-$tag

          docker tag ${{ env.REGISTRY }}/${{ steps.image_name.outputs.name }}:${{ steps.dev_tag.outputs.tag }} \
                     ${{ env.REGISTRY }}/${{ steps.image_name.outputs.name }}:$STAGING_TAG

          docker push ${{ env.REGISTRY }}/${{ steps.image_name.outputs.name }}:$STAGING_TAG

          echo "staging_tag=$STAGING_TAG" >> $GITHUB_OUTPUT

          echo "✅ Staging tag: $STAGING_TAG"

      - name: Update staging overlay kustomization.yaml with new image tag
        run: |
          echo "Updating image to ${{ steps.retag_push.outputs.staging_tag }}"
          yq eval ".images[0].newTag = \"${{ steps.retag_push.outputs.staging_tag }}\"" -i k8s/overlays/staging/kustomization.yaml

      - name: Create staging metadata
        run: |
          COMMIT_SHA=$(git rev-parse HEAD)
          NOW=$(date -u +"%Y-%m-%dT%H:%M:%SZ")

          mkdir -p metadata
          cat <<EOF > metadata/staging.yaml
          version: ${{ steps.semver.outputs.next }}
          image_tag: ${{ steps.retag_push.outputs.staging_tag }}
          commit_sha: $COMMIT_SHA
          promoted_at: "$NOW"
          EOF


      - name: Commit changes
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git add k8s/overlays/staging/kustomization.yaml metadata/staging.yaml $VERSION_FILE
          git commit -m "chore(staging): update image tag to ${{ steps.retag_push.outputs.tag }}"
          git commit -m "chore(staging): promote image ${{ steps.retag_push.outputs.tag }} as ${{ steps.semver.outputs.next }}"
          git push
      
