name: CD to Prod

on:
  push:
    tags:
      - 'v*.*.*'   # e.g. v1.3.2

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/sample-app

jobs:
  deploy-prod:
    runs-on: ubuntu-latest

    permissions:
      contents: write
      packages: write

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Set lowercase image name
        id: image_name
        run: echo "name=${IMAGE_NAME,,}" >> $GITHUB_OUTPUT

      - name: Extract short SHA
        id: short_sha
        run: echo "tag=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

      - name: Get release version
        id: release
        run: echo "version=${GITHUB_REF_NAME}" >> $GITHUB_OUTPUT
        # e.g. v1.3.2

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Pull image from CI build
        run: |
          docker pull ${{ env.REGISTRY }}/${{ steps.image_name.outputs.name }}:${{ steps.short_sha.outputs.tag }}

      - name: Retag and push image (prod release tag + SHA backup)
        run: |
          PROD_TAG=${{ steps.release.outputs.version }}
          SHA_TAG=prod-${{ steps.short_sha.outputs.tag }}

          # Retag for versioned release
          docker tag ${{ env.REGISTRY }}/${{ steps.image_name.outputs.name }}:${{ steps.short_sha.outputs.tag }} \
                     ${{ env.REGISTRY }}/${{ steps.image_name.outputs.name }}:$PROD_TAG

          # Retag also with SHA (for traceability)
          docker tag ${{ env.REGISTRY }}/${{ steps.image_name.outputs.name }}:${{ steps.short_sha.outputs.tag }} \
                     ${{ env.REGISTRY }}/${{ steps.image_name.outputs.name }}:$SHA_TAG

          # Push both
          docker push ${{ env.REGISTRY }}/${{ steps.image_name.outputs.name }}:$PROD_TAG
          docker push ${{ env.REGISTRY }}/${{ steps.image_name.outputs.name }}:$SHA_TAG

      - name: Update kustomization.yaml with release image tag
        run: |
          echo "Updating image to ${{ steps.release.outputs.version }}"
          yq eval ".images[0].newTag = \"${{ steps.release.outputs.version }}\"" -i k8s/overlays/prod/kustomization.yaml

      - name: Commit updated kustomization.yaml
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git add k8s/overlays/prod/kustomization.yaml
          git commit -m "chore(prod): update image tag to ${{ steps.release.outputs.version }}"
          git push
