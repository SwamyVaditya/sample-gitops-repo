name: CD to Dev

# 🔁 Trigger after CI finishes, to avoid racing the image push
on:
  workflow_run:
    workflows: ["CI Pipeline"]   # MUST match the exact name in ci.yml
    types:
      - completed

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/sample-app

jobs:
  deploy-dev:
    # Only proceed if CI succeeded AND the branch was dev
    if: >
      github.event.workflow_run.conclusion == 'success' &&
      github.event.workflow_run.head_branch == 'dev'
    runs-on: ubuntu-latest

    permissions:
      contents: write
      packages: read

    steps:
      - name: Checkout repo (dev)
        uses: actions/checkout@v4
        with:
          ref: dev

      - name: Lowercase image name
        id: image_name
        run: echo "name=${IMAGE_NAME,,}" >> $GITHUB_OUTPUT

      - name: Derive short SHA from triggering CI run
        id: sha
        run: |
          FULL="${{ github.event.workflow_run.head_sha }}"
          echo "short=$(echo "$FULL" | cut -c1-7)" >> $GITHUB_OUTPUT

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Verify image exists (short SHA)
        run: |
          docker buildx imagetools inspect \
            ${{ env.REGISTRY }}/${{ steps.image_name.outputs.name }}:${{ steps.sha.outputs.short }}

      - name: Retag and push image (dev tag)
        run: |

          docker pull ${{ env.REGISTRY }}/${{ steps.image_name.outputs.name }}:${{ steps.sha.outputs.short }}

          # Retag image - dev-latest
          # This is optional, but useful for always having a "latest" tag for dev
          docker tag ${{ env.REGISTRY }}/${{ steps.image_name.outputs.name }}:${{ steps.sha.outputs.short }} \
                     ${{ env.REGISTRY }}/${{ steps.image_name.outputs.name }}:dev-latest

          # Push new tags
          docker push ${{ env.REGISTRY }}/${{ steps.image_name.outputs.name }}:dev-latest
      - name: Update kustomization.yaml with short SHA
        run: |
          yq eval ".images[0].newTag = \"${{ steps.sha.outputs.short }}\"" -i k8s/overlays/dev/kustomization.yaml

      - name: Commit & push deployment manifest
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git add k8s/overlays/dev/kustomization.yaml
          git commit -m "chore(dev): deploy image ${{ steps.sha.outputs.short }}"
          git push

      
      

      