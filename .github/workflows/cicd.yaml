name: CI/CD Pipeline

on:
  push:
    branches: [main]
    paths:
      - 'sample-app/**'
      - 'k8s/**'
      - '.github/workflows/cicd.yaml'
    tags:
      - 'promote-staging'
      - 'promote-prod'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/sample-app

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    permissions:
      contents: write
      packages: write
      deployments: write

    steps:
    - name: Checkout repo
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to GHCR
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Set lowercase IMAGE_NAME
      id: set_image_name
      run: echo "image_name_lc=${IMAGE_NAME,,}" >> $GITHUB_OUTPUT

    - name: Extract short SHA
      id: short_sha
      run: echo "tag=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

    # Optional Linting and Validation
    - name: Install kubeval
      run: |
        wget https://github.com/instrumenta/kubeval/releases/latest/download/kubeval-linux-amd64.tar.gz
        tar xf kubeval-linux-amd64.tar.gz
        sudo mv kubeval /usr/local/bin/kubeval
        rm kubeval-linux-amd64.tar.gz

    - name: Validate Kubernetes YAML manifests
      run: |
        kubectl kustomize k8s/overlays/dev | kubeval --strict

    - name: Lint Dockerfile
      uses: hadolint/hadolint-action@v3.1.0
      with:
        dockerfile: sample-app/Dockerfile

    - name: Build and Push Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./sample-app
        push: true
        tags: ${{ env.REGISTRY }}/${{ steps.set_image_name.outputs.image_name_lc }}:${{ steps.short_sha.outputs.tag }}

    - name: Update dev image tag (default branch deploy)
      if: github.ref == 'refs/heads/main' && !startsWith(github.ref, 'refs/tags/')
      run: |
        sed -i "s|image: .*$|image: ghcr.io/${{ steps.set_image_name.outputs.image_name_lc }}:${{ steps.short_sha.outputs.tag }}|" k8s/overlays/dev/patch-deployment.yaml

    - name: Commit and push dev overlay changes
      if: github.ref == 'refs/heads/main' && !startsWith(github.ref, 'refs/tags/')
      run: |
        git config user.name github-actions
        git config user.email github-actions@github.com
        git add k8s/overlays/dev/patch-deployment.yaml
        git commit -m "Update dev image tag to ${{ steps.short_sha.outputs.tag }}"
        git push

    # Manual promotion to staging/prod via git tags
    - name: Promote to staging/prod
      if: startsWith(github.ref, 'refs/tags/promote-')
      run: |
        ENV=$(echo "${GITHUB_REF##*/}" | cut -d '-' -f2)
        PATCH="k8s/overlays/$ENV/patch-deployment.yaml"
        sed -i "s|image: .*$|image: ghcr.io/${{ steps.set_image_name.outputs.image_name_lc }}:${{ steps.short_sha.outputs.tag }}|" "$PATCH"
        git config user.name github-actions
        git config user.email github-actions@github.com
        git add "$PATCH"
        git commit -m "Promote to $ENV: ${{ steps.short_sha.outputs.tag }}"
        git push origin HEAD:main

    - name: Log Deployment Metadata
      run: |
        echo "App: sample-app"
        echo "Env: $(echo ${GITHUB_REF##*/} | cut -d '-' -f2 || echo 'dev')"
        echo "Image: ghcr.io/${{ steps.set_image_name.outputs.image_name_lc }}:${{ steps.short_sha.outputs.tag }}"
        echo "Commit: ${{ github.sha }}"